#!/usr/bin/env python
import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Empty
def Main():
	#pub2 = rospy.Publisher('Instruction', String, queue_size=10)
	#pub2.publish("land")
	Publisher("Instruction","Header")
	time.sleep(3)
	Publisher("Instruction","takeoff")
	time.sleep(10)
	Publisher("Instruction","yaw,-0.4")
	time.sleep(3)
	Publisher("Instruction","yaw,0")
	time.sleep(3)
	Publisher("Instruction","forward,-0.1")
	time.sleep(1.5)
	Publisher("Instruction","forward,0")
	time.sleep(2)
	Publisher("Instruction","yaw,-0.4")
	time.sleep(3)
	Publisher("Instruction","yaw,0")
	time.sleep(3)
	Publisher("Instruction","forward,-0.1")
	time.sleep(1.5)
	Publisher("Instruction","forward,0")
	time.sleep(2)
	Publisher("Instruction","yaw,-0.4")
	time.sleep(3)
	Publisher("Instruction","yaw,0")
	time.sleep(3)
	Publisher("Instruction","forward,-0.1")
	time.sleep(1.5)
	Publisher("Instruction","forward,0")
	time.sleep(2)
	Publisher("Instruction","yaw,-0.4")
	time.sleep(3)
	Publisher("Instruction","yaw,0")
	time.sleep(3)
	Publisher("Instruction","forward,-0.1")
	time.sleep(1.5)
	Publisher("Instruction","forward,0")
	time.sleep(2)
	Publisher("Instruction","yaw,-0.4")
	time.sleep(3)
	Publisher("Instruction","yaw,0")
	time.sleep(3)
	Publisher("Instruction","forward,-0.1")
	time.sleep(1.5)
	Publisher("Instruction","forward,0")
	time.sleep(2)
	Publisher("Instruction","land")
	status = "null"

def Test():
	Publisher('Instruction',"takeoff")
	time.sleep(10)
	Publisher('Instruction',"forward")
	time.sleep(0.5)
	Publisher('Instruction',"land")

def listener():
	rospy.Subscriber('Percept', String, Listen)
	print("[INFO] Listener started")
	rospy.spin()

#def Listen(msg):
	

def Publisher(topic,Msg):
	print("[INFO] Publishing: "+Msg)
	pub = rospy.Publisher(topic, String, queue_size=20)
	pub.publish(Msg)
	print("[INFO] Done")

def Listen(msg):
	status = msg

def Publisher(topic,Msg):	
	print("[PROC] Publishing: "+Msg)
	pub = rospy.Publisher(topic, String, queue_size=20)

	pub.publish(Msg)
	print("[PROC] Done")
	
def Seguimiento():
	print "[PROC] Iniciando seguimiento"
	while not status == "Hovering":
		Publisher('Instruction',"takeoff")
		time.sleep(1)
		print "[PROC] Waiting for takeoff"
	print "[PROC] Analizando imagen..."

if __name__ == '__main__':
        try:
		rospy.init_node('Procesamiento')
		#listener()
		#Seguimiento()	
		Main()     
   	except rospy.ROSInterruptException:
		pass
