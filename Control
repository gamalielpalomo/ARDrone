#!/usr/bin/env python
import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Empty
from geometry_msgs.msg import Twist

def Main():
	EmptyPublisher("ardrone/takeoff")
	time.sleep(1)
	EmptyPublisher("ardrone/land")
	time.sleep(1)
	TwistPublisher("/cmd_vel",Twist())
	time.sleep(1)
	listener()
def callback(data):
	rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
def descifrar(data):
	print("[CONTROL] Message: "+data.data)
	instruction = data.data
	input = instruction.split(",")
	if input[0] == "takeoff":
		takeoff()
	if input[0] == "land":
		land()
	if input[0] == "forward":
		moveX(float(input[1]))
	if input[0] == "yaw":
		moveYaw(float(input[1]))
def listener():
	rospy.init_node('Control', anonymous=True)
	rospy.Subscriber("Instruction", String, descifrar)
	print("[CONTROL] Listener started")
	rospy.spin()

#########################################################################
# Definicion de las acciones primitivas #
def EmptyPublisher(topic):
	print("[CONTROL] Publishing empty message to "+topic)
	pub = rospy.Publisher(topic, Empty, queue_size=20)
	pub.publish(Empty())
	print("[CONTROL] Done")
def StringPublisher(topic,Msg):
	print("[CONTROL] Publishing: "+Msg+" to "+topic)
	pub = rospy.Publisher(topic, String, queue_size=20)
	pub.publish(Msg)
def TwistPublisher(topic,Msg):
	print("[CONTROL] Publishing Twist message")
	pub = rospy.Publisher(topic, Twist, queue_size=100)
	pub.publish(Msg)

def takeoff():
	print "[CONTROL] Takeoff procedure started..."
	EmptyPublisher("ardrone/takeoff")
def land():
	print "[CONTROL] Land procedure started..."
	EmptyPublisher("ardrone/land")

# Definicion de las funciones para movimiento

#moveX es una funcion que envia datos de movimiento adelante/reversa
def moveX(x_vel):
	print "[CONTROL] Move X axis procedure started..."
	msg = Twist()
	msg.linear.x = x_vel	
	TwistPublisher("/cmd_vel",msg)
#moveY es una funcion que envia datos de movimiento izquierda/derecha
def moveY(y_vel):
	print "[CONTROL] Move Y axis procedure started..."
	msg = Twist()
	msg.linear.y = y_vel	
	TwistPublisher("/cmd_vel",msg)
#moveZ es una funcion que envia datos de movimiento arriba/abajo
def moveZ(z_vel):
	print "[CONTROL] Move Y axis procedure started..."
	msg = Twist()
	msg.linear.z = z_vel	
	TwistPublisher("/cmd_vel",msg)
#moveYaw es una funcion que envia datos de movimiento angular en eje Z (Yaw)
def moveYaw(yaw_vel):
	print "[CONTROL] Move yaw procedure started..."
	msg = Twist()
	msg.angular.z = yaw_vel	
	TwistPublisher("/cmd_vel",msg)


if __name__ == '__main__':
	try:
		rospy.init_node('Control', anonymous=True)
		Main()
	except rospy.ROSInterruptException:
		pass