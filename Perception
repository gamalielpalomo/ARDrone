#!/usr/bin/env python
import rospy
import os
import time
from std_msgs.msg import String
from std_msgs.msg import Empty
from ardrone_autonomy.msg import Navdata

import roslib
import sys
import cv2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
#Status es una numeracion interna de ardrone_driver para indicar el estado del drone
status = -1 
statusList = ["Unknown",
		"Inited",
		"Landed",
		"Flying",
		"Hovering",
		"Test(?)",
		"Taking off",
		"Flying",
		"Landing",
		"Looping"]
bridge = CvBridge()

def perceive(navdata):
	printStatus(navdata)
def imageCallback(imgData):
	try:
		cv_image = bridge.imgmsg_to_cv2(imgData, "bgr8")
	except CvBridgeError as e:
		print(e)

	(rows, cols, channels) = cv_image.shape
	if cols > 60 and rows > 60:
		cv2.circle(cv_image, (50,50),10,255)
	cv2.imshow("Image window", cv_image)
	cv2.waitKey(3)

def perceive(navdata):
	printStatus(navdata)

def printStatus(navdata):
	status = statusList[navdata.state]
	publisher('Percept',"Status:"+status)
	print "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-"	
	print "Battery: "+str(navdata.batteryPercent)+"%"
	print "State: "+status
	print "rotX:"+str(navdata.rotX)+" rotY:"+str(navdata.rotY)+" rotZ:"+str(navdata.rotZ)
	print "Altitude: "+str(navdata.altd)
	print "LinX:"+str(navdata.vx)+" LinY:"+str(navdata.vy)+" LinZ:"+str(navdata.vz)
	time.sleep(0.25)
	os.system("clear")
	
def listener():
	rospy.Subscriber('/ardrone/navdata', Navdata, perceive)
	print("[INFO] Listener started")
	rospy.spin()

def viewer():
	rospy.Subscriber("/ardrone/bottom/image_raw", Image, imageCallback)
	rospy.Subscriber('/ardrone/navdata', Navdata, printStatus)
	print("[PERCEP] Listener started")
	rospy.spin()
def publisher(topic,msg):
	pub = rospy.Publisher(topic, String, queue_size=20)
	pub.publish(msg)


if __name__ == '__main__':
        try:
			rospy.init_node('Perception', anonymous=True)
			viewer()
			try:
				rospy.spin()
			except KeyboardInterrupt:
				print("Shutting down")
        except rospy.ROSInterruptException:
			pass
if __name__ == '__main__':
        try:
		rospy.init_node('Perception', anonymous=True)
		listener()
        except rospy.ROSInterruptException:
          pass